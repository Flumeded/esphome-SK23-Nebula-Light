esphome:
  name: skylight-projector
  platformio_options:
    build_flags:
      - "-DLT_UART_DEFAULT_PORT=1"
  on_boot:
    priority: -100
    then:
      - select.set_index:
          id: select_scene
          index: 3
bk72xx:
  board: cbu

# Enable logging
logger: 
  level: info

substitutions:
  device_name: "Star Projector"

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Fallback AP"
    password: !secret wifi_fallback_password

captive_portal:
web_server:
  port: 80  
  
light:
  - platform: rgb
    name: "${device_name} Light"
    id: rgb_light
    red: red
    green: green
    blue: blue
    effects:
      - random:
          transition_length: 2.5s
          update_interval: 3s
      - random:
          name: Random Slow
          transition_length: 10s
          update_interval: 5s
      - flicker:
          alpha: 95%
          intensity: 2.5%
      - strobe:
      - pulse:
          transition_length: 30s
          min_brightness: 5%
          max_brightness: 100%


  - platform: monochromatic
    name: "${device_name} Laser"
    icon: mdi:laser-pointer
    id: laser
    output: laser_pwm

fan:
  platform: speed
  name: "${device_name} Motor"
  icon: mdi:rotate-right
  id: motor
  output: motor_pwm

# The template switch representing the device is currently active (laser/light
# or motor is ON).
switch:
  - platform: template
    name: "${device_name} Main Switch"
    id: switch_main
    lambda: "return (id(motor).state || id(laser).current_values.is_on() || id(rgb_light).current_values.is_on());"

    # Turn on using the white scene
    turn_on_action:
      - select.set_index:
          id: select_scene
          index: 3

    # Completely turn off the laser, light, motor and button LED
    turn_off_action:
      - fan.turn_off: motor
      - light.turn_off: laser
      - light.turn_off: rgb_light

  - platform: template
    name: "1H Auto Power-Off Timer"
    id: timer_button
    icon: mdi:timer
    optimistic: true
    turn_on_action:
      - script.execute: timer_script
    turn_off_action:
      - script.stop: timer_script

script:
  - id: timer_script
    mode: restart
    then:
      - delay: 600s
      - switch.turn_off: switch_main
      - switch.turn_off: timer_button

output:
  - platform: libretiny_pwm
    id: red
    pin: P26
    inverted: true
    min_power: 0.10
    zero_means_zero: true

  - platform: libretiny_pwm
    id: green
    pin: P24
    inverted: true
    min_power: 0.10
    zero_means_zero: true

  - platform: libretiny_pwm
    id: blue
    pin: P6
    inverted: true
    min_power: 0.10
    zero_means_zero: true

  - platform: libretiny_pwm
    id: laser_pwm
    pin: P8
    min_power: 0.3
    zero_means_zero: true
    

  - platform: libretiny_pwm
    id: motor_pwm
    pin: P7
    max_power: 0.7

binary_sensor:
  - platform: gpio
    pin:
      number: P14
      mode:
        input: true
        pullup: true
      inverted: true
    id: "button"

    # Act as main switch on single click
    on_click:
      then:
        - switch.toggle: switch_main

    # Switch scenes on long press
    on_multi_click:
      - timing:
          - on for at least 1s
        then:
          - select.next: select_scene

select:
  platform: template
  name: "${device_name} Scene"
  id: select_scene
  options:
    - "Scene - Red"
    - "Scene - Blue"
    - "Scene - Green"
    - "Scene - Full Brightness"
    - "Scene - Dimmed"
  initial_option: "Scene - Full Brightness"
  optimistic: true
  on_value:
    then:
      # [INDEX=0]: Scene - Red
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 0);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 50%
                red: 80%
                green: 0%
                blue: 50%
            - light.turn_on:
                id: laser
                brightness: 60%
            - fan.turn_on:
                id: motor
                speed: 100

      # [INDEX=1]: Scene - Blue
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 1);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 50%
                red: 50%
                green: 0%
                blue: 100%
            - light.turn_on:
                id: laser
                brightness: 60%
            - fan.turn_on:
                id: motor
                speed: 100

      # [INDEX=2]: Scene - Green
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 2);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 50%
                red: 0%
                green: 60%
                blue: 30%
            - light.turn_on:
                id: laser
                brightness: 60%
            - fan.turn_on:
                id: motor
                speed: 100

      # [INDEX=3]: Scene - Full Brightness
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 3);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 100%
                red: 100%
                green: 100%
                blue: 100%
            - light.turn_on:
                id: laser
                brightness: 100%
            - fan.turn_on:
                id: motor
                speed: 100

      # [INDEX=4]: Scene - Dimmed
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 4);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 30%
                red: 5%
                green: 5%
                blue: 5%
            - light.turn_on:
                id: laser
                brightness: 30%
            - fan.turn_on:
                id: motor
                speed: 30
